// Создаём состояние по умолчанию
const defaultState = {
    cash: 5,
}
/*
 * Чтобы передать параметром reducer, его необходимо создать.
 * reducer - это просто функция, которая может быть объявлена любым способом.
 * Состояние - это некоторый объект/массив/примитивное значение, которое хранит какие-то данные.
 * Состояние по умолчанию будет присваиваться в тот момент, когда пользователь открыл приложение.
 * Каждый раз, когда в dispatch будем прокидывать какой-то action, состояние будет изменяться и храниться в store до тех пор, пока пользователь либо не обновит страницу, либо не закроет приложение.
 * После пробрасывания в dispatch action попадает в reducer, и отрабатывает тот или иной case, в зависимости от типа, который указан в action.
 */
export const cashReducer = (state = defaultState, action) => {
    /*
     * После того, как reducer был создан, в нём необходимо производить некоторую логику.
     * Логика фокусируется на том, какой action был проброшен в функцию.
     * Создаём конструкцию switch, в которой будем отслеживать тип проброшенного action.
     * Есть 2 action: добавить и снять деньги.
     * Для каждого action создаётся case.
     */
    switch (action.type) {
      case "ADD_CASH":
        /*
         * Поскольку состояние в Redux нельзя изменить, нужно каждый раз возвращать новый объект.
         * Создаём новый объект, в него разворачиваем старое состояние при помощи оператора spread и изменяем какое-то конкретное поле.
         * Мы должны получить текущее кол-во денег на счету и добавить к этому кол-ву ту сумму, что пришла в action.
         * Допустим, изначально на счету 5. Мы что-то передали в payload. После чего состояние изменилось, и мы храним уже другое значение.
         */
          return {...state, cash: state.cash + action.payload}
      case "GET_CASH": 
      // Выполняем те же операции, что и в предыдущем case, только здесь уже сумму снимаем со счёта
          return {...state, cash: state.cash - action.payload}
          // Конструкция switch обязательно должна возвращать состояние
      default:
        return state
    }
}